name: Build and Release Windows Installer

on:
    push:
        branches:
          - master    # Trigger on pushes to the main branch

jobs:
  build-and-release:
    runs-on: windows-latest  # Use a Windows runner
    permissions:  # Grant permissions to create releases
      contents: write
      packages: write
      id-token: write

    steps:
      # 1. Checkout the code from GitHub
      - name: Checkout Code
        uses: actions/checkout@v4

      # 2. Set up Flutter SDK
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'  # Use the stable Flutter channel

      # 3. Get Flutter dependencies
      - name: Get Dependencies
        run: flutter pub get

      # 4. Build the Flutter Windows app
      - name: Build Flutter App
        run: flutter build windows --release

      # 5. Install Inno Setup (to create the installer)
      - name: Install Inno Setup
        run: |
          choco install innosetup --yes

      # 6. Create the installer directory
      - name: Create Installer Directory
        run: |
          mkdir build\windows\installer

      # 7. Copy the Inno Setup script to the build directory
      - name: Copy Inno Setup Script
        run: |
          copy desktop_ino_script.iss build\windows\installer\setup.iss

      # 8. Generate the Windows installer using Inno Setup
      - name: Create Installer
        run: |
          cd build\windows\installer
          ISCC setup.iss

      # 9. Create the Release Tag (prepend "v" to avoid 40-char SHA)
      - name: Create Release Tag
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"
          git tag -a "v${{ github.sha }}" -m "Release tag from commit ${{ github.sha }}"

      # 10. Upload the installer as a GitHub Release
      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          # Use the tag with "v" prefix to avoid the 40-char SHA issue
          tag: v${{ github.sha }}
          # Use the PAT stored in the "ACTION" secret
          token: ${{ secrets.ACTION }}
          # Path to the generated installer
          artifacts: "build/windows/installer/Output/Doctor_Assistant.exe"
          body: |
            ## Release Notes
            - Built from commit: [${{ github.sha }}](${{
              github.server_url
            }}/${{ github.repository }}/commit/${{ github.sha }})